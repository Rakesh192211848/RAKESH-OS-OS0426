#include <stdio.h>

#define MAX_PROCESSES 3

int main() {
    int pid[MAX_PROCESSES] = {0, 1, 2};
    int burst_time[MAX_PROCESSES] = {2, 4, 8};
    int arrival_time[MAX_PROCESSES] = {0, 0, 0};
    int waiting_time[MAX_PROCESSES] = {0};
    int turnaround_time[MAX_PROCESSES] = {0};
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    float avg_waiting_time = 0.0;
    float avg_turnaround_time = 0.0;

    // Calculate waiting time and turnaround time for each process
    for (int i = 0; i < MAX_PROCESSES; i++) {
        // Calculate waiting time of the current process
        if (i == 0) {
            waiting_time[i] = 0; // First process starts immediately
        } else {
            waiting_time[i] = burst_time[i-1] + waiting_time[i-1];
        }

        // Calculate turnaround time of the current process
        turnaround_time[i] = waiting_time[i] + burst_time[i];

        // Update total waiting time and total turnaround time
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // Calculate average waiting time and average turnaround time
    avg_waiting_time = (float)total_waiting_time / MAX_PROCESSES;
    avg_turnaround_time = (float)total_turnaround_time / MAX_PROCESSES;

    // Print the results
    printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", pid[i], burst_time[i], arrival_time[i], waiting_time[i], turnaround_time[i]);
    }
    printf("Average waiting time: %.2f\n", avg_waiting_time);
    printf("Average turnaround time: %.2f\n", avg_turnaround_time);

    return 0;
}
